@model web_chung_cu.Models.Room
@using web_chung_cu.Models

@{
    ViewBag.Title = "Thêm một phòng";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h5>Thêm mới</h5>

<form action="@Url.Action("Add", "Room")" method="post" class="box" enctype="multipart/form-data">
    @Html.AntiForgeryToken()

    <div class="row g-3">
        <div class="col-6">
            <label for="image" class="form-label">Ảnh phòng *</label>
            <input type="file" class="form-control @(ViewData.ModelState["image"] != null && ViewData.ModelState["image"].Errors.Count > 0 ? "is-invalid" : "")" name="image" id="image">
            @Html.ValidationMessageFor(r => r.image, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="libraryImage" class="form-label">Thư viện ảnh *</label>
            <input type="file" multiple class="form-control @(ViewData.ModelState["libraryImage"] != null && ViewData.ModelState["libraryImage"].Errors.Count > 0 ? "is-invalid" : "")" name="libraryImage" id="libraryImage">
            @Html.ValidationMessageFor(r => r.libraryImage, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="roomNumber" class="form-label">Số phòng *</label>
            <input type="number" min="0" max="9999" class="form-control @(ViewData.ModelState["roomNumber"] != null && ViewData.ModelState["roomNumber"].Errors.Count > 0 ? "is-invalid" : "")" name="roomNumber" id="roomNumber" value="@Request.Form["roomNumber"]">
            @Html.ValidationMessageFor(r => r.roomNumber, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="floorNumber" class="form-label">Số tầng *</label>
            <input type="number" min="0" max="99" class="form-control @(ViewData.ModelState["floorNumber"] != null && ViewData.ModelState["floorNumber"].Errors.Count > 0 ? "is-invalid" : "")" name="floorNumber" id="floorNumber" value="@Request.Form["floorNumber"]">
            @Html.ValidationMessageFor(r => r.floorNumber, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="title" class="form-label">Tiêu đề *</label>
            <input class="form-control input__convert-to-slug @(ViewData.ModelState["title"] != null && ViewData.ModelState["title"].Errors.Count > 0 ? "is-invalid" : "")" name="title" id="title" value="@Request.Form["title"]">
            @Html.ValidationMessageFor(r => r.title, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="slug" class="form-label">Đường dẫn *</label>
            <input class="form-control input__slug @(ViewData.ModelState["slug"] != null && ViewData.ModelState["slug"].Errors.Count > 0 ? "is-invalid" : "")" name="slug" id="slug" value="@Request.Form["slug"]">
            @Html.ValidationMessageFor(r => r.slug, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="price" class="form-label">Giá *</label>
            <div class="input-group">
                <input type="number" min="0" step="10000" class="form-control @(ViewData.ModelState["price"] != null && ViewData.ModelState["price"].Errors.Count > 0 ? "is-invalid" : "")" name="price" id="price" value="@(Request.Form["price"] != null ? Request.Form["price"] : "0")">
                <span class="input-group-text" id="basic-addon2">VNĐ</span>
            </div>
            @Html.ValidationMessageFor(r => r.price, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="pricePile" class="form-label">Giá cọc *</label>
            <div class="input-group">
                <input type="number" min="0" step="10000" class="form-control @(ViewData.ModelState["pricePile"] != null && ViewData.ModelState["pricePile"].Errors.Count > 0 ? "is-invalid" : "")" name="pricePile" id="pricePile" value="@(Request.Form["pricePile"] != null ? Request.Form["pricePile"] : "0")">
                <span class="input-group-text" id="basic-addon2">VNĐ</span>
            </div>
            @Html.ValidationMessageFor(r => r.pricePile, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="bedroomNumber" class="form-label">Số phòng ngủ *</label>
            <input type="number" min="0" max="99" class="form-control @(ViewData.ModelState["bedroomNumber"] != null && ViewData.ModelState["bedroomNumber"].Errors.Count > 0 ? "is-invalid" : "")" name="bedroomNumber" id="bedroomNumber" value="@(Request.Form["bedroomNumber"] != null ? Request.Form["bedroomNumber"] : "0")">
            @Html.ValidationMessageFor(r => r.bedroomNumber, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="toletNumber" class="form-label">Số phòng vệ sinh *</label>
            <input type="number" min="0" max="99" class="form-control @(ViewData.ModelState["toletNumber"] != null && ViewData.ModelState["toletNumber"].Errors.Count > 0 ? "is-invalid" : ""))" name="toletNumber" id="toletNumber" value="@(Request.Form["toletNumber"] != null ? Request.Form["toletNumber"] : "0")">
            @Html.ValidationMessageFor(r => r.toletNumber, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="area" class="form-label">Diện tích *</label>
            <div class="input-group">
                <input type="number" min="0" max="9999" class="form-control @(ViewData.ModelState["area"] != null && ViewData.ModelState["area"].Errors.Count > 0 ? "is-invalid" : "")" name="area" id="area" value="@(Request.Form["area"] != null ? Request.Form["area"] : "0")">
                <span class="input-group-text" id="basic-addon2">M2</span>
            </div>
            @Html.ValidationMessageFor(r => r.area, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="isInterior" class="form-label">Nội thất *</label>
            <select class="form-select @(ViewData.ModelState["isInterior"] != null && ViewData.ModelState["isInterior"].Errors.Count > 0 ? "is-invalid" : "")" aria-label="Default select example" name="isInterior" id="isInterior">
                <option value="-1" @(Request.Form["isInterior"] == "-1" || Request.Form["isInterior"] == null ? "selected" : "")>-- Chọn nội thất --</option>
                <option value="1" @(Request.Form["isInterior"] == "1" ? "selected" : "")>Đầy đủ nội thất</option>
                <option value="0" @(Request.Form["isInterior"] == "0" ? "selected" : "")>Chưa có nội thất</option>
            </select>
            @Html.ValidationMessageFor(r => r.isInterior, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="apartmentId" class="form-label">Chung cư *</label>
            <select class="form-select @(ViewData.ModelState["apartmentId"] != null && ViewData.ModelState["apartmentId"].Errors.Count > 0 ? "is-invalid" : "")" aria-label="Default select example" name="apartmentId" id="apartmentId">
                <option value="-1" @(Request.Form["apartmentId"] == "-1" || Request.Form["apartmentId"] == null ? "selected" : "")>-- Chọn chung cư --</option>
                @if (ViewData["apartments"] != null)
                {
                    foreach (Apartment apartment in (List<Apartment>)ViewData["apartments"])
                    {
                        <option value="@apartment.id" @(Request.Form["apartmentId"] == apartment.id.ToString() ? "selected" : "")>@apartment.name</option>
                    }
                }
            </select>
            @Html.ValidationMessageFor(r => r.apartmentId, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-6">
            <label for="status" class="form-label">Trạng thái *</label>
            <select class="form-select @(ViewData.ModelState["status"] != null && ViewData.ModelState["status"].Errors.Count > 0 ? "is-invalid" : "")" aria-label="Default select example" name="status" id="status">
                <option value="-1" @(Request.Form["status"] == "-1" || Request.Form["status"] == null ? "selected" : "")>-- Chọn trạng thái --</option>
                <option value="1" @(Request.Form["status"] == "1" ? "selected" : "")>Còn trống</option>
                <option value="0" @(Request.Form["status"] == "0" ? "selected" : "")>Đã cho thuê</option>
            </select>
            @Html.ValidationMessageFor(r => r.status, "", new { @class = "invalid-feedback" })
        </div>

        <div class="col-12">
            <label for="description" class="form-label">Mô tả</label>
            <textarea class="form-control" id="description" rows="3" name="description"></textarea>
        </div>
    </div>

    <div class="btn__wrapper">
        <button type="submit" class="btn btn-primary btn-sm">Thêm mới</button>
        <a href="@Url.Action("Index", "Room")" class="btn btn-danger btn-sm">Hủy</a>
    </div>
</form>

<script src="@Url.Content("~/Content/ckeditor/ckeditor.js")"></script>
<script>
    CKEDITOR.replace("description");
</script>